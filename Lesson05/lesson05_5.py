# –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å DELETE –∑–∞–ø—Ä–æ—Å—ã –∏ —É–¥–∞–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–µ—Ç–æ–¥ DELETE).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.


from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()


class User(BaseModel):
    id: int
    name: str
    email: str
    password: str


users = []

for i in range(1, 11):
    users.append(User(
        id=i,
        name=f'name{i}',
        email=f'email{i}@mail.ru',
        password=f'password{i}')
    )


@app.get('/')
async def index():
    return 'Hi!'


@app.get('/users/')
async def get_all_users():
    return users


@app.get('/users/{user_id}', response_model=List[User])
async def get_user(user_id: int):
    for i in users:
        if i.id == user_id:
            return {'id':user_id,'name':i.name}
    return HTTPException(status_code=404, detail='This user is not found!')


@app.post('/users/',response_model=User)
async def create_user(user: User):
    user.id=len(users)+1
    users.append(user)
    return user

@app.put('/users/',response_model=User)
async def update_users(user_id:int, user: User):
    for i in range(len(users)):
        if users[i].id==user_id:
            user.id=user_id
            users[i]=user
            return user
    raise HTTPException( status_code=404,detail='This user is not found')


@app.delete('/users/{user_id}')
async def delete_user(user_id:int):
    for i in range(len(users)):
        if users[i].id==user_id:
            del users[i]
            return {'This user delete'}
    raise HTTPException( status_code=404,detail='This user is not found')
